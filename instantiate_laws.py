#!/usr/bin/python3
import os
import re
from stat import S_IREAD, S_IRGRP, S_IROTH
from typing import Union, Sequence, Collection, Match

classical = {
    'theory Laws': 'theory Laws_Classical',
    'Axioms': 'Classical',
    'domain': 'type'
}

quantum = {
    'theory Laws': 'theory Laws_Quantum',
    'Axioms': 'Quantum',
    'domain': 'enum'
}

def multisubst(mappings: Collection[(Union[re.Pattern, str])], content: str) -> str:
    replacements = []
    patterns = []
    i = 0
    for pat, repl in mappings:
        if isinstance(pat, str):
            patStr = re.escape(pat)
        else:
            patStr = pat.pattern
        replacements.append(repl)
        patterns.append(f"(?P<GROUP_{i}>\\b(?:{patStr})\\b)")
        i += 1

    pattern = re.compile("|".join(patterns))

    def replFunc(m:Match):
        # print(m)
        for name, text in m.groupdict().items():
            if text is None: continue
            if text.startswith("GROUP_"): continue
            idx = int(name[6:])
            # print(name, idx)
            return replacements[idx]
        assert False

    return pattern.sub(replFunc, content)

def rewrite_laws(outputfile, substitutions):
    with open('Laws.thy', 'rt') as f:
        content = f.read()
    newContent = multisubst(substitutions.items(), content)
    # print(newContent)
    os.remove(outputfile)
    with open(outputfile, 'wt') as f:
        f.write("""(*
 * This is an autogenerated file. Do not edit.
 * The original is Laws.thy. It was converted using instantiate_laws.py.
 *)

""")
        f.write(newContent)
    os.chmod(outputfile, S_IREAD|S_IRGRP|S_IROTH)

rewrite_laws('Laws_Classical.thy', classical)
rewrite_laws('Laws_Quantum.thy', quantum)

